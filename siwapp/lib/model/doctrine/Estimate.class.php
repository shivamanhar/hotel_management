<?php

/**
 * Estimate
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    siwapp
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Estimate extends BaseEstimate
{
  const DRAFT    = 0;
  const REJECTED = 1;
  const PENDING  = 2;
  const APPROVED = 3;
  
  public function __toString()
  {
    return $this->getSeries()->getValue().($this->getDraft() ? '[draft]' : $this->getNumber());
  }

  public function __get($name)
  {
    if(strpos($name, 'tax_amount_') === 0)
    {
      return $this->calculate($name, true);
    }
    return parent::__get($name);
  }

  public function __isset($name)
  {
    if(strpos($name, 'tax_amount_') === 0)
    {
      return true;
    }
    return parent::__isset($name);
  }
  
  public static function getStatusArray()
  {
    return array(
      '' => '',
      Estimate::PENDING => 'Pending',
      Estimate::APPROVED => 'Approved',
      Estimate::REJECTED => 'Rejected'
    );
  }
  
  public function checkStatus()
  {
    if($this->getDraft())
    {
      $this->setStatus(Estimate::DRAFT);
    }
  }
  
  public function getStatusString()
  {
    switch($this->getStatus())
    {
      case Estimate::DRAFT:
        $status = 'draft';
        break;
      case Estimate::REJECTED:
        $status = 'rejected';
        break;
      case Estimate::PENDING:
        $status = 'pending';
        break;
      case Estimate::APPROVED:
        $status = 'approved';
        break;
      default:
        $status = 'unknown';
        break;
    }
    
    return $status;
  }
  
  public function toPrintableArray()
  {
    $a = $this->toArray(false);
    $a['number'] = $this->__toString();
    $a['Items']  = array();
    foreach ($this->Items as $item)
    {
      $a['Items'][] = $item->toPrintableArray();
    }
    
    return $a;
  }
  
  public function preSave($event)
  {
    // compute the number of invoice
    if (!$this->getNumber() && !$this->getDraft())
    {
      $this->setNumber($this->_table->getNextNumber($this->getSeriesId()));
    }
    
    parent::preSave($event);
  }
  
  public function generateInvoice()
  {
    $invoice = new Invoice();
    
    // Get Invoice column mapping and intersect with Estimate columns
    // to remove non common columns. Unset id and type columns.
    $iKeys = array_flip(array_keys($invoice->getTable()->getColumns()));
    $data  = $this->toArray(false);
    unset(
      $data['id'],
      $data['type'],
      $data['created_at'],
      $data['updated_at'],
      $data['draft'],
      $data['number'],
      $data['sent_by_email']
    );
    $data  = array_intersect_key($data, $iKeys);
    
    $invoice->fromArray($data);
    // $invoice->setDraft(true);
    $invoice->setIssueDate(sfDate::getInstance()->format('Y-m-d'));
    $invoice->setDueDate(sfDate::getInstance()->addMonth()->format('Y-m-d'));
    
    // Copy Items and taxes
    foreach ($this->Items as $item)
    {
      $iTmp = $item->copy(false);
      foreach ($item->Taxes as $tax)
      {
        $iTmp->Taxes[] = $tax;
      }
      $invoice->Items[] = $iTmp;
    }
    
    // copy tags
    foreach ($this->getTags() as $tag)
    {
      $invoice->addTag($tag);
    }
    
    if ($invoice->trySave())
    {
      $invoice->refresh(true)->setAmounts()->save();
      return $invoice;
    }
    
    return false;
  }
}
