<?php

/**
 * ProductTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProductTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ProductTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Product');
    }

    public function retrieveDescAndPrice($product_id)
    {
      if (!$product_id) return array();
      $product = $this->findOneById($product_id);
      return array($product->getDescription(), $product->getPrice());
    }

    public function getReference($product_id)
    {
      //product is not required handle this case
      if (!$product_id) return "";
      $product = $this->findOneById($product_id);
      return $product->getReference();
    }
    
    /**
     * Retrieve Items that has been invoiced with this product
     * and whose invoice status is not draft
     *
     * @return Doctrine_Collection 
     * @author JoeZ99 <jzarate@gmail.com>
     **/
    public function getInvoicedItems($product_id, $date_range = array())
    {
      $res = Doctrine::getTable('Item')
        ->createQuery()
        ->addSelect("i.quantity, i.unitary_cost")
        ->from("Item i")
        ->innerJoin("i.Common as inv WITH (inv.type = ? AND inv.draft != ?)",array('Invoice',1))
        ->where('product_id = ?', $product_id);
      if(isset($date_range['from']) && 
         ($filtered_date = Tools::filterDate($date_range['from'])))
      {
        $res->andWhere(
                       'inv.issue_date >= ?', 
                       sfDate::getInstance($filtered_date)->to_database());
      }
      if(isset($date_range['to']) && 
         ($filtered_date = Tools::filterDate($date_range['to'])))
      {
        $res->andWhere(
                       'inv.issue_date <= ?', 
                       sfDate::getInstance($filtered_date)->to_database());
      }
      return $res->execute();
    }
    
    /**
     * method for ajax request
     *
     * @return array
     * @author Enrique Martinez
     **/
    public function retrieveForSelect($q, $limit)
    {
      $items = $this->createQuery()
        ->where('reference LIKE ?', '%'.$q.'%')
        ->orWhere('description LIKE ?', '%'.$q.'%')
        ->limit($limit)
        ->execute();

      $res = array();
      $i = 0;
      foreach ($items as $item)
      {
        $res[$i]['id'] = $item->getId();
        $res[$i]['reference'] = $item->getReference();
        $res[$i]['description'] = $item->getDescription();
        $res[$i]['price'] = $item->getPrice();
        $i++;
      }
      
      return $res;
    }
    
}